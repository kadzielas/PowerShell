---
name: "PowerShell testing scripts"

run-name: >
  Testing code pulled by @${{ github.actor }}
  on branch @${{ github.ref_name }}

on:
  workflow_dispatch:
    inputs:
      url:
        description: "URL to Tests"
        required: true
  push:
    branches:
      - main
      - test
  pull_request:
    branches:
      - main
      - test
    paths-ignore:
      - "!.dockerignore"

jobs:
  general-check:
    name: "Scripts quality check"
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871

      - name: Debug folder structure
        shell: pwsh
        run: |
          Write-Host "Working dir: $PWD"
          Get-ChildItem -Recurse

      - name: "Ensure UTF-8 without BOM"
        run: |
          Get-ChildItem -Recurse -Filter *.ps1 | ForEach-Object {
          $content = Get-Content $_.FullName -Raw
          Set-Content $_.FullName -Value $content -Encoding UTF8
          }
        shell: pwsh

      - name: "Install PSScriptAnalyzer"
        run: |
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
        shell: pwsh

      - name: "Run Analyzer"
        run: |
          $results = Invoke-ScriptAnalyzer -Path .
          -Recurse -Severity Warning, Error
          if ($results.Count -gt 0) {
          $results | Format-Table
          throw "::error::PSScriptAnalyzer found quality issue"
            }
        shell: pwsh

      - name: "Run Pester Tests"
        run: |
          if (Test-Path "./tests") {
            Invoke-Pester -Path ./tests -Output Detailed
            } else {
              Write-Host "No test folder found, skipping"
              }
        shell: pwsh

      - name: "Environment info"
        run: |
          [System.Environment]::OSVersion.Version
        shell: pwsh

  readme-file-check:
    name: "Check quality of README file"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871

      - name: "Install markdownlint"
        run: |
          npm install -g markdownlint-cli

      - name: "Install cspell"
        run: |
          npm install -g cspell

      - name: "Spell check README"
        run: |
          cspell "README.md"

  deploy-config-check:
    name: "Check quality of deploy.yaml file"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871

      - name: "Install yamllint"
        run: |
          sudo apt-get install yamllint

      - name: "Lint YAML files"
        run: |
          yamllint .

  github-actions-workflows-validate:
    name: "Validate GH actions workflows"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871

      - name: "Validate workflows"
        uses: raven-actions/actionlint@v1
        with:
          path: ".github/workflows/"

  connection-check:
    name: "Connection script check"
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871

      - name: "Check provided URL connection status"
        run: |
          . ./scripts/check_connection.ps1 `
           -Test-Connection-HTTPS ${{ github.event.inputs.url }} `
           -Verbose
        shell: pwsh

      - name: "Install PSScriptAnalyzer"
        run: |
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
        shell: pwsh

      - name: "Run Analyzer"
        run: |
          $results = (
          Invoke-ScriptAnalyzer `
          -Path . `
          -Recurse `
          -Severity Warning, Error
          )

          if ($results.Count -gt 0) {
          $results | Format-Table
          throw "::error::PSScriptAnalyzer found issue"
            }
        shell: pwsh
